<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.soqi.oem.dao.SeoMapper" >
  <resultMap id="BaseResultMap" type="com.soqi.oem.gentry.Seo" >
    <id column="TaskId" property="taskid" jdbcType="BIGINT" />
    <result column="UserId" property="userid" jdbcType="INTEGER" />
    <result column="Keyword" property="keyword" jdbcType="VARCHAR" />
    <result column="Url" property="url" jdbcType="VARCHAR" />
    <result column="SeoUrl" property="seourl" jdbcType="VARCHAR" />
    <result column="SearchType" property="searchtype" jdbcType="INTEGER" />
    <result column="RankFirst" property="rankfirst" jdbcType="INTEGER" />
    <result column="RankLast" property="ranklast" jdbcType="INTEGER" />
    <result column="RankLastChange" property="ranklastchange" jdbcType="INTEGER" />
    <result column="RankUpdateTime" property="rankupdatetime" jdbcType="TIMESTAMP" />
    <result column="AddTime" property="addtime" jdbcType="TIMESTAMP" />
    <result column="FromType" property="fromtype" jdbcType="INTEGER" />
    <result column="FromId" property="fromid" jdbcType="BIGINT" />
    <result column="BuyTime" property="buytime" jdbcType="TIMESTAMP" />
    <result column="FreezeAmount" property="freezeamount" jdbcType="DECIMAL" />
    <result column="OemFreezeAmount" property="oemfreezeamount" jdbcType="DECIMAL" />
    <result column="CostCount" property="costcount" jdbcType="INTEGER" />
    <result column="CostAmount" property="costamount" jdbcType="DECIMAL" />
    <result column="CostTime" property="costtime" jdbcType="TIMESTAMP" />
    <result column="SettleHour" property="settlehour" jdbcType="INTEGER" />
    <result column="SettleTime" property="settletime" jdbcType="TIMESTAMP" />
    <result column="SettleStart" property="settlestart" jdbcType="TIMESTAMP" />
    <result column="ApiPriceTaskId" property="apipricetaskid" jdbcType="BIGINT" />
    <result column="ApiRankTaskId" property="apiranktaskid" jdbcType="BIGINT" />
    <result column="ApiWatchTaskId" property="apiwatchtaskid" jdbcType="BIGINT" />
    <result column="ErrorMsg" property="errormsg" jdbcType="VARCHAR" />
    <result column="Status" property="status" jdbcType="INTEGER" />
    <result column="Price" property="price" jdbcType="DECIMAL" />
    <result column="FromRank" property="fromrank" jdbcType="INTEGER" />
    <result column="ToRank" property="torank" jdbcType="INTEGER" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from Seo
    where TaskId = #{taskid,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.soqi.oem.gentry.Seo" >
    insert into Seo (TaskId, UserId, Keyword, 
      Url, SeoUrl, SearchType, 
      RankFirst, RankLast, RankLastChange, 
      RankUpdateTime, AddTime, FromType, 
      FromId, BuyTime, FreezeAmount,OemFreezeAmount, 
      CostCount, CostAmount, CostTime, 
      SettleHour, SettleTime, SettleStart, 
      ApiPriceTaskId, ApiRankTaskId, ApiWatchTaskId, 
      ErrorMsg, "Status")
    values (#{taskid,jdbcType=BIGINT}, #{userid,jdbcType=INTEGER}, #{keyword,jdbcType=VARCHAR}, 
      #{url,jdbcType=VARCHAR}, #{seourl,jdbcType=VARCHAR}, #{searchtype,jdbcType=INTEGER}, 
      #{rankfirst,jdbcType=INTEGER}, #{ranklast,jdbcType=INTEGER}, #{ranklastchange,jdbcType=INTEGER}, 
      #{rankupdatetime,jdbcType=TIMESTAMP}, #{addtime,jdbcType=TIMESTAMP}, #{fromtype,jdbcType=INTEGER}, 
      #{fromid,jdbcType=BIGINT}, #{buytime,jdbcType=TIMESTAMP}, #{freezeamount,jdbcType=DECIMAL}, #{oemfreezeamount,jdbcType=DECIMAL},
      #{costcount,jdbcType=INTEGER}, #{costamount,jdbcType=DECIMAL}, #{costtime,jdbcType=TIMESTAMP}, 
      #{settlehour,jdbcType=INTEGER}, #{settletime,jdbcType=TIMESTAMP}, #{settlestart,jdbcType=TIMESTAMP}, 
      #{apipricetaskid,jdbcType=BIGINT}, #{apiranktaskid,jdbcType=BIGINT}, #{apiwatchtaskid,jdbcType=BIGINT}, 
      #{errormsg,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.soqi.oem.gentry.Seo" >
    update Seo
    set UserId = #{userid,jdbcType=INTEGER},
      Keyword = #{keyword,jdbcType=VARCHAR},
      Url = #{url,jdbcType=VARCHAR},
      SeoUrl = #{seourl,jdbcType=VARCHAR},
      SearchType = #{searchtype,jdbcType=INTEGER},
      RankFirst = #{rankfirst,jdbcType=INTEGER},
      RankLast = #{ranklast,jdbcType=INTEGER},
      RankLastChange = #{ranklastchange,jdbcType=INTEGER},
      RankUpdateTime = #{rankupdatetime,jdbcType=TIMESTAMP},
      AddTime = #{addtime,jdbcType=TIMESTAMP},
      FromType = #{fromtype,jdbcType=INTEGER},
      FromId = #{fromid,jdbcType=BIGINT},
      BuyTime = #{buytime,jdbcType=TIMESTAMP},
      FreezeAmount = #{freezeamount,jdbcType=DECIMAL},
      OemFreezeAmount = #{oemfreezeamount,jdbcType=DECIMAL},
      CostCount = #{costcount,jdbcType=INTEGER},
      CostAmount = #{costamount,jdbcType=DECIMAL},
      CostTime = #{costtime,jdbcType=TIMESTAMP},
      SettleHour = #{settlehour,jdbcType=INTEGER},
      SettleTime = #{settletime,jdbcType=TIMESTAMP},
      SettleStart = #{settlestart,jdbcType=TIMESTAMP},
      ApiPriceTaskId = #{apipricetaskid,jdbcType=BIGINT},
      ApiRankTaskId = #{apiranktaskid,jdbcType=BIGINT},
      ApiWatchTaskId = #{apiwatchtaskid,jdbcType=BIGINT},
      ErrorMsg = #{errormsg,jdbcType=VARCHAR},
      "Status" = #{status,jdbcType=INTEGER}
    where TaskId = #{taskid,jdbcType=BIGINT}
  </update>
  <update id="seoRankUpdateByPlatformId" parameterType="com.soqi.oem.gentry.Seo" >
    update Seo
    set
      RankFirst = #{rankfirst,jdbcType=INTEGER},
      RankLast = #{ranklast,jdbcType=INTEGER},
      RankLastChange = #{ranklastchange,jdbcType=INTEGER},
      RankUpdateTime = #{rankupdatetime,jdbcType=TIMESTAMP}
    where 1 =1 
    <choose> 
	    <when test="apiranktaskid != null">
	    and ApiRankTaskId = #{apiranktaskid}
	    </when>
	    <when test="apiwatchtaskid != null">
	    and ApiWatchTaskId = #{apiwatchtaskid}
	    </when>
	    <otherwise>
	    </otherwise>
	 </choose>
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select TaskId, UserId, Keyword, Url, SeoUrl, SearchType, RankFirst, RankLast, RankLastChange, 
    RankUpdateTime, AddTime, FromType, FromId, BuyTime, FreezeAmount, OemFreezeAmount, CostCount, CostAmount, 
    CostTime, SettleHour, SettleTime, SettleStart, ApiPriceTaskId, ApiRankTaskId, ApiWatchTaskId, 
    ErrorMsg, Status
    from Seo
    where TaskId = #{taskid,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select TaskId, UserId, Keyword, Url, SeoUrl, SearchType, RankFirst, RankLast, RankLastChange, 
    RankUpdateTime, AddTime, FromType, FromId, BuyTime, FreezeAmount, OemFreezeAmount, CostCount, CostAmount, 
    CostTime, SettleHour, SettleTime, SettleStart, ApiPriceTaskId, ApiRankTaskId, ApiWatchTaskId, 
    ErrorMsg, Status
    from Seo
  </select>
  
  <select id="selectByTaskids" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select TaskId, ApiPriceTaskId, ApiRankTaskId, ApiWatchTaskId, SearchType, Status, Keyword, Url
    from Seo
    where TaskId in
    <foreach item="taskid" collection="array" open="(" separator="," close=")">
            #{taskid}
    </foreach>
    order by SearchType desc
  </select>
  
  <select id="selectByApiTaskId" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select TaskId, UserId, ApiPriceTaskId, ApiRankTaskId, ApiWatchTaskId, SearchType, Status, RankUpdateTime,
    RankLast, RankFirst, RankLastChange
    from Seo
    where 1=1
    <choose> 
	    <when test="apiranktaskid != null">
	    and ApiRankTaskId = #{apiranktaskid}
	    </when>
	    <when test="apipricetaskid != null">
	    and ApiPriceTaskId = #{apipricetaskid}
	    </when>
	    <when test="apiwatchtaskid != null">
	    and ApiWatchTaskId = #{apiwatchtaskid}
	    </when>
	    <otherwise>
	    </otherwise>
	</choose>
  </select>
  
  <select id="qrySeoManageListByUserId" resultMap="BaseResultMap" parameterType="map">
    select m.TaskId, m.UserId, m.Keyword, m.Url, m.SeoUrl, m.SearchType, m.RankFirst, m.RankLast, m.RankLastChange, 
    m.RankUpdateTime, m.AddTime, m.FromType, m.FromId, m.BuyTime, m.FreezeAmount, m.OemFreezeAmount, m.CostCount, m.CostAmount, 
    m.CostTime, m.SettleHour, m.SettleTime, m.SettleStart, m.ApiPriceTaskId, m.ApiRankTaskId, m.ApiWatchTaskId, 
    m.ErrorMsg, m.Status, n.Price, n.FromRank, n.ToRank
    from Seo m left join SeoPrice n on m.TaskId = n.TaskId and n.FromRank = 1 where m.UserId = #{userid,jdbcType=INTEGER} and (m.Status = 4 or m.Status=5) Order by m.TaskId Offset #{start,jdbcType=INTEGER} Row Fetch Next #{size,jdbcType=INTEGER} Rows Only  
  </select>
  
  <select id="qryCountSeoManageListByUserId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    select count(1) as total from Seo m  where m.UserId = #{userid,jdbcType=INTEGER} and (m.Status = 4 or m.Status=5)
  </select>
  
  <select id="qrySeoApplyListByUserId" resultMap="BaseResultMap" parameterType="map">
    select m.TaskId, m.UserId, m.Keyword, m.Url, m.SeoUrl, m.SearchType, m.RankFirst, m.RankLast, m.RankLastChange, 
    m.RankUpdateTime, m.AddTime, m.FromType, m.FromId, m.BuyTime, m.FreezeAmount, m.OemFreezeAmount, m.CostCount, m.CostAmount, 
    m.CostTime, m.SettleHour, m.SettleTime, m.SettleStart, m.ApiPriceTaskId, m.ApiRankTaskId, m.ApiWatchTaskId, 
    m.ErrorMsg, m.Status, n.Price, n.FromRank, n.ToRank
    from Seo m left join SeoPrice n on m.TaskId = n.TaskId and n.FromRank = 1 where m.UserId = #{userid,jdbcType=INTEGER} and m.Status &lt;= 3 Order by m.TaskId Offset #{start,jdbcType=INTEGER} Row Fetch Next #{size,jdbcType=INTEGER} Rows Only  
  </select>
  
  <select id="qryCountSeoApplyListByUserId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    select count(1) as total from Seo m  where m.UserId = #{userid,jdbcType=INTEGER} and m.Status &lt;= 3 
  </select>
  
  <select id="qrySeoManageListByOemId" resultMap="BaseResultMap" parameterType="map">
    select m.TaskId, m.UserId, m.Keyword, m.Url, m.SeoUrl, m.SearchType, m.RankFirst, m.RankLast, m.RankLastChange, 
    m.RankUpdateTime, m.AddTime, m.FromType, m.FromId, m.BuyTime, m.FreezeAmount, m.OemFreezeAmount, m.CostCount, m.CostAmount, 
    m.CostTime, m.SettleHour, m.SettleTime, m.SettleStart, m.ApiPriceTaskId, m.ApiRankTaskId, m.ApiWatchTaskId, 
    m.ErrorMsg, m.Status, n.Price, n.FromRank, n.ToRank
    from Seo m left join SeoPrice n on m.TaskId = n.TaskId and n.FromRank = 1  where exists  (select * from OemUser n where n.UserId = m.UserId and n.OemId = #{oemid,jdbcType=INTEGER}) Order by m.TaskId Offset #{start,jdbcType=INTEGER} Row Fetch Next #{size,jdbcType=INTEGER} Rows Only  
  </select>
  
  <select id="qryCountSeoManageListByOemId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    select count(1) as total from Seo m where exists  (select * from OemUser n where n.UserId = m.UserId and n.OemId = #{oemid,jdbcType=INTEGER})
  </select>
  <!-- 批量增加操作 -->
  <insert id="batchInsert" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="taskid">
	  insert into seo (UserId, Keyword, 
      Url, SeoUrl, SearchType, 
      RankFirst, RankLast, RankLastChange, 
      RankUpdateTime, AddTime, FromType, 
      FromId, BuyTime, FreezeAmount, OemFreezeAmount,
      CostCount, CostAmount, CostTime, 
      SettleHour, SettleTime, SettleStart, 
      ApiPriceTaskId, ApiRankTaskId, ApiWatchTaskId, 
      ErrorMsg, Status) values
		<foreach item="item" index="index" collection="list" separator=",">
			<trim prefix="(" suffix=")" suffixOverrides=",">
				#{item.userid},#{item.keyword},#{item.url},
				<choose>
					<when test="item.seourl!=null and item.seourl!=''">
						#{item.seourl},
					</when>
					<otherwise>
						'',
					</otherwise>
				</choose>
				#{item.searchtype},#{item.rankfirst},#{item.ranklast},0,#{item.rankupdatetime},#{item.addtime},1,
				0,#{item.buytime},0,0,
				0,0,#{item.costtime},
				#{item.settlehour},#{item.settletime},#{item.settlestart},
				<choose>
					<when test="item.apipricetaskid!=null">
						#{item.apipricetaskid},
					</when>
					<otherwise>
						0,
					</otherwise>
				</choose>
				<choose>
					<when test="item.apiranktaskid!=null">
						#{item.apiranktaskid},
					</when>
					<otherwise>
						0,
					</otherwise>
				</choose>
				0,
				<choose>
					<when test="item.errormsg!=null and item.errormsg!=''">
						#{item.errormsg},
					</when>
					<otherwise>
						'',
					</otherwise>
				</choose>
				#{item.status}
			</trim>
		</foreach> 
		<!-- <selectKey resultType="java.lang.Integer" keyProperty="taskid" order="AFTER">
    		select @@IDENTITY as taskid
  	  	</selectKey> -->
  </insert>
  <!-- 批量删除操作 -->
  <delete id="batchDel" parameterType="java.lang.Integer">
        delete from seo where TaskId in
        <foreach item="taskid" collection="array" open="(" separator="," close=")">
            #{taskid}
        </foreach>
  </delete>
  <!-- 批量更新相关字段-->
  <update id="batchSeoFieldsByTaskids" parameterType="map">
  	update Seo
    <trim prefix="set" suffixOverrides=",">
    	<if test="status!=null">
    		Status = #{status},
    	</if>
    	<if test="freezeamount!=null">
    		FreezeAmount = #{freezeamount},
    	</if>
    	<if test="oemfreezeamount!=null">
    		OemFreezeAmount = #{oemfreezeamount},
    	</if>
    	<if test="buytime!=null">
    		BuyTime = #{buytime},
    	</if>
    </trim>
    where TaskId in
        <foreach item="taskid" collection="taskids" open="(" separator="," close=")">
            #{taskid}
        </foreach>
  </update>
  
  <update id="updateStatusByListSeo" parameterType="java.util.List">
      <foreach collection="list" separator=";" item="item">
	      update Seo
	      set FreezeAmount = #{item.freezeamount,jdbcType=DECIMAL},
	      <if test="item.oemfreezeamount!=null">
    		OemFreezeAmount = #{item.oemfreezeamount},
    		</if>
	      <if test="item.buytime!=null">
	      	BuyTime = #{item.buytime},
	      </if>
	      Status = #{item.status,jdbcType=INTEGER}
	      where TaskId = #{item.taskid,jdbcType=INTEGER}
      </foreach>
  </update>
  
  <update id="updateServiceIdByListSeo" parameterType="java.util.List">
      <foreach collection="list" separator=";" item="item">
	      update Seo
	      <trim prefix="set" suffixOverrides=",">
	      <if test="item.apipricetaskid!=null">
	      	ApiPriceTaskId = #{item.apipricetaskid,jdbcType=BIGINT},
	      </if>
	      <if test="item.apiranktaskid!=null">
	      ApiRankTaskId = #{item.apiranktaskid,jdbcType=BIGINT},
	      </if>
	      <if test="item.apiwatchtaskid!=null">
	      	ApiWatchTaskId = #{item.apiwatchtaskid,jdbcType=BIGINT}
	      </if>
	      </trim>
	      where TaskId = #{item.taskid,jdbcType=INTEGER}
      </foreach>
  </update>
  
</mapper>