<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.soqi.oem.dao.OemaccountdetailMapper" >
  <resultMap id="BaseResultMap" type="com.soqi.oem.gentry.Oemaccountdetail" >
    <id column="Id" property="id" jdbcType="BIGINT" />
    <result column="OemId" property="oemid" jdbcType="INTEGER" />
    <result column="Change" property="change" jdbcType="DECIMAL" />
    <result column="Freeze" property="freeze" jdbcType="DECIMAL" />
    <result column="Balance" property="balance" jdbcType="DECIMAL" />
    <result column="TradeType" property="tradetype" jdbcType="INTEGER" />
    <result column="TradeId" property="tradeid" jdbcType="VARCHAR" />
    <result column="Description" property="description" jdbcType="VARCHAR" />
    <result column="AddTime" property="addtime" jdbcType="TIMESTAMP" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from OemAccountDetail
    where Id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.soqi.oem.gentry.Oemaccountdetail" >
    insert into OemAccountDetail (OemId, Change, Freeze, 
      Balance, TradeType, TradeId, 
      Description, AddTime)
    values (#{oemid,jdbcType=INTEGER}, #{change,jdbcType=DECIMAL}, #{freeze,jdbcType=DECIMAL}, 
      #{balance,jdbcType=DECIMAL}, #{tradetype,jdbcType=INTEGER}, #{tradeid,jdbcType=VARCHAR}, 
      #{description,jdbcType=VARCHAR}, #{addtime,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.soqi.oem.gentry.Oemaccountdetail" >
    update OemAccountDetail
    set OemId = #{oemid,jdbcType=INTEGER},
      Change = #{change,jdbcType=DECIMAL},
      Freeze = #{freeze,jdbcType=DECIMAL},
      Balance = #{balance,jdbcType=DECIMAL},
      TradeType = #{tradetype,jdbcType=INTEGER},
      TradeId = #{tradeid,jdbcType=VARCHAR},
      Description = #{description,jdbcType=VARCHAR},
      AddTime = #{addtime,jdbcType=TIMESTAMP}
    where Id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select Id, OemId, Change, Freeze, Balance, TradeType, TradeId, Description, AddTime
    from OemAccountDetail
    where Id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select Id, OemId, "Change", "Freeze", Balance, TradeType, TradeId, Description, AddTime
    from OemAccountDetail
  </select>
  <select id="qryOemAcDtlsByOemid" resultMap="BaseResultMap" parameterType="map" >
   select Id, OemId, Change, Freeze, Balance, TradeType, TradeId, Description, AddTime
   from OemAccountDetail d where exists (select * from OemBase u where u.ParentOemId = #{oemid,jdbcType=INTEGER} and u.OemId = d.OemId) Order by Id Offset #{start,jdbcType=INTEGER} Row Fetch Next #{size,jdbcType=INTEGER} Rows Only
  </select>
  <select id="qryCountOemAcDtlsByOemid" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select count(1) as total from OemAccountDetail d where exists (select * from OemBase u where u.ParentOemId = #{oemid,jdbcType=INTEGER} and u.OemId = d.OemId)
  </select>
  
  <select id="qrySecondOemPersonBill" resultMap="BaseResultMap" parameterType="map" >
   select Id, OemId, Change, Freeze, Balance, TradeType, TradeId, Description, AddTime
   from OemAccountDetail d where d.OemId = #{oemid,jdbcType=INTEGER} Order by Id Offset #{start,jdbcType=INTEGER} Row Fetch Next #{size,jdbcType=INTEGER} Rows Only
  </select>
  
  <select id="qryCountSecondOemPersonBill" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select count(1) as total from OemAccountDetail d where d.OemId = #{oemid,jdbcType=INTEGER}
  </select>
</mapper>